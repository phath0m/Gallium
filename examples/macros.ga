use gallium.ast

###
### This macro transforms its arguments into a call to "puts"
###
macro say(parser) => ast.Call(ast.Ident("puts"), [parser.expr()])

###
### This macro implements a new statement into the language, an
### "until" loop, which loops until a condition is met
###
macro until(parser) => ast.WhileStmt(
    ast.UnaryOp(ast.UNARYOP_LOGICAL_NOT, parser.expr()),
    parser.parse()
)
###
### This macro lets you compile a piece of code n times. This 
### demonstrates dynamically passing information to a macro at 
### runtime.
###
func times(n) => macro (parser) {
    stmts = []
    body = parser.parse()

    for i in 0 .. n {
        stmts.append(body)
    }

    return ast.CodeBlock(stmts)
}

###
### The syntax for calling a macro is:
### <expr>`[(<token>*)][{<token>*}]
###
### Code can follow the ` deliminated by parenthesis and/or curly braces.
###
### Curly braces must be after the paranthesis, if they are used.
###
say`("Hello, world!")

puts("Counting to 10 with until loop")

i = 0

until `(i == 10) {
    puts(i)
    i = i + 1;
}

# How many times to compile the below loop
amount = 3

times(amount) `{
    puts("Hello, World!")
}